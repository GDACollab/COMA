// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class ReadSpreadSheets : MonoBehaviour
{
	public TextAsset file;

	void Start(){
		Load (file);
	}

	List<Row> rowList = new List<Row>();
	bool isLoaded = false;

	public bool IsLoaded()
	{
		return isLoaded;
	}

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
			row.Identifier = grid[i][0];
			row.ACTOR = grid[i][1];
			row.CUE = grid[i][2];
			row.CONTEXT = grid[i][3];
			row.Conversation_Path_Chain = grid[i][4];
			row.Choice_Type = grid[i][5];
			row.GameObject_Interacted_With = grid[i][6];
			row.INFLECTION = grid[i][7];
			row.LOCATION = grid[i][8];
			row.AREA = grid[i][9];
			row.EFFECT = grid[i][10];

			rowList.Add(row);
		}
		isLoaded = true;
	}

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_Identifier(string find)
	{
		return rowList.Find(x => x.Identifier == find);
	}
	public List<Row> FindAll_Identifier(string find)
	{
		return rowList.FindAll(x => x.Identifier == find);
	}
	public Row Find_ACTOR(string find)
	{
		return rowList.Find(x => x.ACTOR == find);
	}
	public List<Row> FindAll_ACTOR(string find)
	{
		return rowList.FindAll(x => x.ACTOR == find);
	}
	public Row Find_CUE(string find)
	{
		return rowList.Find(x => x.CUE == find);
	}
	public List<Row> FindAll_CUE(string find)
	{
		return rowList.FindAll(x => x.CUE == find);
	}
	public Row Find_CONTEXT(string find)
	{
		return rowList.Find(x => x.CONTEXT == find);
	}
	public List<Row> FindAll_CONTEXT(string find)
	{
		return rowList.FindAll(x => x.CONTEXT == find);
	}
	public Row Find_Conversation_Path_Chain(string find)
	{
		return rowList.Find(x => x.Conversation_Path_Chain == find);
	}
	public List<Row> FindAll_Conversation_Path_Chain(string find)
	{
		return rowList.FindAll(x => x.Conversation_Path_Chain == find);
	}
	public Row Find_Choice_Type(string find)
	{
		return rowList.Find(x => x.Choice_Type == find);
	}
	public List<Row> FindAll_Choice_Type(string find)
	{
		return rowList.FindAll(x => x.Choice_Type == find);
	}
	public Row Find_GameObject_Interacted_With(string find)
	{
		return rowList.Find(x => x.GameObject_Interacted_With == find);
	}
	public List<Row> FindAll_GameObject_Interacted_With(string find)
	{
		return rowList.FindAll(x => x.GameObject_Interacted_With == find);
	}
	public Row Find_INFLECTION(string find)
	{
		return rowList.Find(x => x.INFLECTION == find);
	}
	public List<Row> FindAll_INFLECTION(string find)
	{
		return rowList.FindAll(x => x.INFLECTION == find);
	}
	public Row Find_LOCATION(string find)
	{
		return rowList.Find(x => x.LOCATION == find);
	}
	public List<Row> FindAll_LOCATION(string find)
	{
		return rowList.FindAll(x => x.LOCATION == find);
	}
	public Row Find_AREA(string find)
	{
		return rowList.Find(x => x.AREA == find);
	}
	public List<Row> FindAll_AREA(string find)
	{
		return rowList.FindAll(x => x.AREA == find);
	}
	public Row Find_EFFECT(string find)
	{
		return rowList.Find(x => x.EFFECT == find);
	}
	public List<Row> FindAll_EFFECT(string find)
	{
		return rowList.FindAll(x => x.EFFECT == find);
	}

}